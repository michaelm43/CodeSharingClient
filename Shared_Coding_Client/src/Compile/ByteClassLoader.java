package Compile;

import java.net.URL;
import java.net.URLClassLoader;
import java.util.Map;

/**
 * Class loader that loads a class from a byte array. This loader can load
 * classes that are passed to the constructor in a map in their compiled binary
 * form. The main use of this class loader is to load the class or classes that
 * were generated during the compilation of a single Java source class that may
 * contain inner classes, anonymous classes and thus need the load of more than
 * one class to have the {@code Class} object usable in your Java code.
 * 
 * @author Peter Verhas
 * 
 */
public class ByteClassLoader extends URLClassLoader {
	private final Map<String, byte[]> classFilesMap;

	/**
	 * @param urls
	 *            passed to the super constructor.
	 * @param parent
	 *            passed to the super constructor. For more information see
	 *            {@link URLClassLoader#URLClassLoader(URL[], ClassLoader)}.
	 * @param classFilesMap
	 *            a map that contains the binary code of the classes that may be
	 *            loaded by this class loader. The key of the map is the name of
	 *            the class that is used when the class is loaded calling the
	 *            method {@link #findClass(String)}. The value in a map element
	 *            is the byte array of the class as generated by the compiler.
	 */
	public ByteClassLoader(URL[] urls, ClassLoader parent,
			final Map<String, byte[]> classFilesMap) {
		super(urls, parent);
		this.classFilesMap = classFilesMap;
	}

	@Override
	protected Class<?> findClass(final String name)
			throws ClassNotFoundException {
		//System.out.println("findClass({})" + name);
		if (classFilesMap.containsKey(name)) {
			byte[] classFile = classFilesMap.get(name);
			Class<?> klass = defineClass(name, classFile, 0, classFile.length);
			releaseClassFile(name);
			return klass;
		}
		return super.findClass(name);
	}

	/**
	 * The class loader remains in memory so long as long the loaded class
	 * remains in memory but the source byte array that was used to load the
	 * code of the class is not needed anymore. This method removes the element
	 * from the map that contained the byte array so that the gc can reclaim the
	 * memory.
	 * 
	 * @param name
	 *            is the name of the class that was recently loaded. The map
	 *            should contain an element with this key.
	 */
	private void releaseClassFile(String name) {
		classFilesMap.remove(name);
	}

}
